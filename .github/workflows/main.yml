# .github/workflows/main.yml
name: Django CI/CD

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-django
        pip install gunicorn dj-database-url whitenoise

    - name: Run Django migrations (CI check only)
      run: |
        python manage.py check

    - name: Run tests
      env:
        SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY_CI || 'una_clave_secreta_dummy_para_ci' }}
        EXCHANGE_RATE_API_KEY: ${{ secrets.EXCHANGE_RATE_API_KEY }}
        DJANGO_SETTINGS_MODULE: core.settings
      run: |
        # Usamos --ds=core.settings para asegurar que toma la configuración
        # --nomigrations para evitar problemas con migraciones en tests
        # --reuse-db (sin el =false) a veces funciona para limpiar
        # Pero, la mejor opción es confiar en el comportamiento default con bases de datos aisladas
        pytest --fail-on-template-vars # Esto es opcional, pero buena práctica
        # Si sigue fallando, podríamos intentar:
        # pytest --create-db # O solo pytest (si el default es crear)

    - name: Deploy to Railway
      if: success()
      run: |
        curl -fsSL https://railway.app/install.sh | sh
        railway login --token ${{ secrets.RAILWAY_TOKEN }}
        railway link ${{ secrets.RAILWAY_PROJECT_ID }} --service ${{ secrets.RAILWAY_SERVICE_ID }}
        railway deploy --service ${{ secrets.RAILWAY_SERVICE_ID }} # Despliega
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
        RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
